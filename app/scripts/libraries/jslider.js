// Generated by CoffeeScript 1.7.1
(function($, window, document) {
    var Plugin, defaults, pluginName, scale;
    pluginName = 'jSlider';
    scale = 0;
    defaults = {
        width: 940,
        height: 528,
        effect: {
            type: "slide",
            speed: 500
        },
        minSize: 40,
        maxSize: 80,
        itemPadding: 10,
        itemsToShow: 8,
        callback: {
            complete: function() {}
        },
        slides: ["http://placehold.it/50x50", "http://placehold.it/50x50", "http://placehold.it/50x50", "http://placehold.it/50x50", "http://placehold.it/50x50"]
    };
    Plugin = (function() {
        function Plugin(elem, options) {
            this.elem = elem;
            this.options = $.extend({}, defaults, options);
            this.init();
        }

        Plugin.prototype.init = function() {
            var $elem;
            $elem = $(this.elem);
            this.data = $.data(this);
            this.icons = [];
            this.iconSizes = [];
            this.iconNodes = [];
            this.isOut = false;
            this.isIn = false;
            this.isInIcon = false;
            this.animSize = this.options.minSize + ((this.options.maxSize - this.options.minSize) / 2);
            $.data(this, "animating", false);
            $.data(this, "total", $elem.children().length);
            $.data(this, "current", this.options.start - 1);
            $elem.css({
                'overflow': 'hidden'
            });
            $.each(this.options.slides, (function(_this) {
                return function(i, slide) {
                    var image;
                    image = $("<img>");
                    image.attr("src", slide);
                    return _this.iconNodes.push(image);
                };
            })(this));
            this.options.itemsToShow = this.options.itemsToShow > this.iconNodes.length ? this.iconNodes.length : this.options.itemsToShow;
            $elem.append(this.iconNodes);
            $elem.$slides = $elem.children().wrapAll('<div class="jSlider-slides"></div>').parent();
            $elem.$slidesContainer = $elem.$slides.wrap('<div class="jSlide-slides-container"></div>').parent();
            $elem.$controls = $('<div class="jSlider-controls"><span class="prev">Prev</span><span class="next">Next</span></div>');
            $elem.prepend($elem.$controls);
            $elem.$container = $elem.children().wrapAll('<div class="jSlider-container"></div>').parent();
            $elem.$container.css({
                "position": "relative"
            });
            $elem.$slidesContainer.css({
                "overflow": "hidden",
                "width": ((this.options.minSize + this.options.itemPadding) * this.options.itemsToShow) + "px",
                "height": this.options.maxSize + "px",
                "margin": "0 auto"
            });
            $elem.$slides.css({
                "overflow": "hidden",
                "position": "relative",
                "left": 0,
                "width": ((this.options.minSize + this.options.itemPadding) * this.iconNodes.length) + "px"
            });
            $elem.$slides.children().addClass("jSlider-slide").css({
                "position": "relative",
                "padding-right": this.options.itemPadding + "px",
                "cursor": "pointer",
                "margin-top": "40px",
                "z-index": "99"
            });
            $elem.$controls.css({
                "position": "absolute",
                "width": "100%",
                "top": (($elem.$container.height() / 2) + (this.options.minSize / 2)) + "px"
            });
            $elem.$controls.find('.prev').css({
                "position": "absolute",
                "cursor": "pointer",
                "z-index": "999",
                "left": ((($elem.$container.width() - $elem.$slidesContainer.width()) / 2) - 40) + "px"
            });
            $elem.$controls.find('.next').css({
                "position": "absolute",
                "cursor": "pointer",
                "z-index": "999",
                "right": ((($elem.$container.width() - $elem.$slidesContainer.width()) / 2) - 30) + "px"
            });
            this.slides = $('.jSlider-slide');
            $.each(this.slides, (function(_this) {
                return function(i, slide) {
                    var $slide;
                    $slide = $(slide);
                    $slide.data('slide-index', i);
                    _this.iconSizes[i] = _this.options.minSize;
                    _this.icons.push($slide);
                    return _this.updateIcon(i);
                };
            })(this));
            $elem.$slides.on('mousemove', '.jSlider-slide', (function(_this) {
                return function(e) {
                    return _this.handleMouseMove(e, $elem);
                };
            })(this));
            $elem.$slides.on('mousemove', (function(_this) {
                return function(e) {
                    return _this.isOut = false;
                };
            })(this));
            $elem.$slides.on('mouseout', (function(_this) {
                return function(e) {
                    return _this.handleMouseOut(e);
                };
            })(this));
            $elem.$controls.on("click", ".next", (function(_this) {
                return function(e) {
                    return _this.handleNext(e, $elem);
                };
            })(this));
            return $elem.$controls.on("click", ".prev", (function(_this) {
                return function(e) {
                    return _this.handlePrev(e, $elem);
                };
            })(this));
        };

        Plugin.prototype.updateIcon = function(idx) {
            var that;
            that = this;
            return that.icons[idx].stop().animate({
                width: that.iconSizes[idx],
                height: that.iconSizes[idx],
                marginTop: (that.options.maxSize - that.iconSizes[idx]) + 'px'
            }, 200, 'easeOutExpo', function() {
                return that.options.callback.complete();
            });
        };

        Plugin.prototype.handleMouseMove = function(e, $elem) {
            var animSize, icon, iconIndex, maxSize, minSize, that, _results;
            that = this;
            that.isInIcon = true;
            maxSize = that.options.maxSize;
            minSize = that.options.minSize;
            animSize = that.animSize;
            iconIndex = $(e.target).data('slide-index');
            $.each(that.icons, function(i, icon) {
                if (i < iconIndex) {
                    that.iconSizes[i] = animSize;
                }
                if (i > iconIndex) {
                    that.iconSizes[i] = animSize;
                }
                if (i < iconIndex - 1) {
                    that.iconSizes[i] = minSize;
                }
                if (i > iconIndex + 1) {
                    that.iconSizes[i] = minSize;
                }
                if (i === iconIndex) {
                    return that.iconSizes[i] = maxSize;
                }
            });
            _results = [];
            for (icon in that.icons) {
                _results.push(that.updateIcon(icon));
            }
            return _results;
        };

        Plugin.prototype.handleMouseOut = function(e) {
            var icon, minSize, that, _results;
            that = this;
            minSize = that.options.minSize;
            $.each(that.icons, function(i, icon) {
                return that.iconSizes[i] = minSize;
            });
            _results = [];
            for (icon in that.icons) {
                _results.push(that.updateIcon(icon));
            }
            return _results;
        };

        Plugin.prototype.handleNext = function(e, $elem) {
            var left, minSize, that;
            that = this;
            minSize = that.options.minSize;
            if (((parseInt($elem.$slides.css("left")) * -1) + $elem.$slidesContainer.width()) === $elem.$slides.width()) {
                return;
            }
            left = parseInt($elem.$slides.css("left")) - (minSize + that.options.itemPadding);
            return $elem.$slides.animate({
                left: left
            }, 500);
        };

        Plugin.prototype.handlePrev = function(e, $elem) {
            var left, minSize, that;
            that = this;
            minSize = that.options.minSize;
            if ((parseInt($elem.$slides.css("left")) * -1) === 0) {
                return;
            }
            left = parseInt($elem.$slides.css("left")) + (minSize + that.options.itemPadding);
            return $elem.$slides.animate({
                left: left
            }, 500);
        };

        return Plugin;

    })();
    return $.fn[pluginName] = function(options) {
        return this.each(function() {
            if (!$.data(this, "plugin_" + pluginName)) {
                return $.data(this, "plugin_" + pluginName, new Plugin(this, options));
            }
        });
    };
})($, window, document);